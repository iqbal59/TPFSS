<?php
/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */
 
class Voucher extends CI_Controller
{
    public function __construct()
    {
        parent::__construct();
        $this->load->model('Voucher_model');
        $this->load->model('Store_model');
    }

    /*
     * Listing of vouchers
     */
    public function index()
    {
        // $params['limit'] = RECORDS_PER_PAGE;
        // $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        // $config = $this->config->item('pagination');
        // $config['base_url'] = site_url('admin/voucher/index');
        // $config['total_rows'] = $this->Voucher_model->get_all_vouchers_count();
        // $this->pagination->initialize($config);


        $data=array();
        $condition_array=array('from_dt'=>$this->input->get('from_date'), 'to_dt'=>$this->input->get('to_date'));
   
        if (!empty($condition_array['from_dt']) && !empty($condition_array['to_dt'])) {
            // $data['vouchers'] = $this->Voucher_model->get_all_vouchers($condition_array);
            $data['search_query']=$condition_array;
        } else {
            $data['vouchers'] = $this->Voucher_model->get_all_vouchers(array('from_dt'=> date('Y-m-01'), 'to_dt' => date('Y-m-d')));
            // $data['search_query']=array('from_dt'=> date('Y-m-01'), 'to_dt' => date('Y-m-d'));
        }


        // $data['vouchers'] = $this->Voucher_model->get_all_vouchers($params);
        //print_r($this->db->last_query());

        //echo  $this->db->last_query();
        $data['main_content'] = $this->load->view('admin/voucher/index', $data, true);
        $this->load->view('admin/index', $data);
    }


    public function voucher_datatable()
    {
        $arrayList = [];
        $result 	= $this->Voucher_model->getRows($this->input->get());
        $i 			= $this->input->get('start');
        foreach ($result as $row) {
            $action = '
			<a href="'.base_url('admin/voucher/edit/'.$row->id).'" class="">
              <i class="fe-edit"></i> Edit</a>';
            $arrayList [] = [
                ++$i,
                $row->id,
                $row->firm_name,
                $row->voucher_type,
                $row->amount,
                date('d-m-Y', strtotime($row->create_date)),
                $row->descriptions,
                $action
                            ];
        }
        $output = array(
            "draw" 				=> $this->input->get('draw'),
            "recordsTotal" 		=> $this->Voucher_model->countAll($this->input->get()),
            "recordsFiltered"	=> $this->Voucher_model->countFiltered($this->input->get()),
            "data" 				=> $arrayList,
            "querymy"           => $this->db->last_query()
        );

        echo json_encode($output);
    }








    /*
     * Adding a new voucher
     */
    public function add()
    {
        $data['stores']=$this->Store_model->get_all_stores();
        $this->load->library('form_validation');

        $this->form_validation->set_rules('store_id', 'Store Id', 'required');
        $this->form_validation->set_rules('amount', 'Amount', 'required|numeric');
        $this->form_validation->set_rules('voucher_type', 'Voucher Type', 'required');
        
        if ($this->form_validation->run()) {
            $params = array(
                'voucher_type' => $this->input->post('voucher_type'),
                'store_id' => $this->input->post('store_id'),
                'amount' => $this->input->post('amount'),
                'create_date' => $this->input->post('create_date'),
            );
            
            $voucher_id = $this->Voucher_model->add_voucher($params);
            redirect('admin/voucher/index');
        } else {
            $data['main_content'] =$this->load->view('admin/voucher/add', $data, true);
            $this->load->view('admin/index', $data);
        }
    }

    /*
     * Editing a voucher
     */
    public function edit($id)
    {
        // check if the voucher exists before trying to edit it
        $data['voucher'] = $this->Voucher_model->get_voucher($id);
        $data['stores']=$this->Store_model->get_all_stores();
        if (isset($data['voucher']['id'])) {
            $this->load->library('form_validation');

            $this->form_validation->set_rules('store_id', 'Store Id', 'required');
            $this->form_validation->set_rules('amount', 'Amount', 'required|numeric');
            $this->form_validation->set_rules('voucher_type', 'Voucher Type', 'required');
        
            if ($this->form_validation->run()) {
                $params = array(
                    'voucher_type' => $this->input->post('voucher_type'),
                    'store_id' => $this->input->post('store_id'),
                    'amount' => $this->input->post('amount'),
                    //'create_date' => $this->input->post('create_date'),
                );

                $this->Voucher_model->update_voucher($id, $params);
                redirect('admin/voucher/index');
            } else {
                $data['main_content'] = $this->load->view('admin/voucher/edit', $data, true);
                $this->load->view('admin/index', $data);
            }
        } else {
            show_error('The voucher you are trying to edit does not exist.');
        }
    }

    /*
     * Deleting voucher
     */
    public function remove($id)
    {
        $voucher = $this->Voucher_model->get_voucher($id);

        // check if the voucher exists before trying to delete it
        if (isset($voucher['id'])) {
            $this->Voucher_model->delete_voucher($id);
            redirect('admin/voucher/index');
        } else {
            show_error('The voucher you are trying to delete does not exist.');
        }
    }


    //IMPORT VOUCHER

    public function importvoucher()
    {
        $this->load->library('form_validation');
            
        if (empty($_FILES['excel_file']['name'])) {
            $this->form_validation->set_rules('excel_file', 'Excel File', 'required');
        }
        $this->form_validation->set_rules('voucher_type', 'Voucher Type', 'required');
        
        if ($this->form_validation->run()) {
            $voucherType=$this->input->post('voucher_type');
            $file=$_FILES['excel_file']['tmp_name'];

            $handle = fopen($file, "r") or die("err");


            switch ($voucherType) {
                    case 'C':
                        $row=0;
                        while (($filesop = fgetcsv($handle, 1000, ",")) !== false) {
                            if ($row++ < 7) {
                                continue;
                            }

                            $storeCode=$this->Store_model->get_store_by_code(trim($filesop[13]));

                            if (!$storeCode) {
                                continue;
                            }

                            $params = array(
                    'voucher_type' => $voucherType,
                    'store_id' =>$storeCode['id'],
                    'amount' => trim($filesop[5]),
                    'create_date' => date('Y-m-d', strtotime($filesop[0]))
                );

                            //print_r($params);

                            $this->Voucher_model->add_voucher($params);
                        }
              
               redirect('admin/voucher/index');
                    break;
                    case 'D':
                        $row=0;
                        while (($filesop = fgetcsv($handle, 1000, ",")) !== false) {
                            if ($row++ < 7) {
                                continue;
                            }

                            $storeCode=$this->Store_model->get_store_by_code(trim($filesop[15]));

                            if (!$storeCode) {
                                continue;
                            }

                            $params = array(
                    'voucher_type' => $voucherType,
                    'store_id' =>$storeCode['id'],
                    'amount' => trim($filesop[6]),
                      'create_date' => date('Y-m-d', strtotime($filesop[0]))
                );

                            // print_r($params);

                            $this->Voucher_model->add_voucher($params);
                        }
              
                redirect('admin/voucher/index');

                    break;
                    case 'R':
                        $row=0;
                        while (($filesop = fgetcsv($handle, 1000, ",")) !== false) {
                            if ($row++ < 1) {
                                continue;
                            }

                            $storeCode=$this->Store_model->get_store_by_code(trim($filesop[5]));

                            if (!$storeCode) {
                                continue;
                            }

                            $params = array(
                    'voucher_type' => $voucherType,
                    'store_id' =>$storeCode['id'],
                    'amount' => trim($filesop[4]),
                    'create_date' => date('Y-m-d', strtotime($filesop[0])),
                    'descriptions' => trim($filesop[6])
                );

                            // print_r($params);

                            $this->Voucher_model->add_voucher($params);
                        }
              
                redirect('admin/voucher/index');
                    break;
                }
        } else {
            $data['main_content'] = $this->load->view('admin/voucher/import', null, true);
            $this->load->view('admin/index', $data);
        }
    }
}